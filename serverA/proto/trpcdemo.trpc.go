// Code generated by trpc-go/trpc-cmdline v1.0.9. DO NOT EDIT.
// source: trpcdemo.proto

package proto

import (
	"context"
	"errors"
	"fmt"

	_ "trpc.group/trpc-go/trpc-go"
	"trpc.group/trpc-go/trpc-go/client"
	"trpc.group/trpc-go/trpc-go/codec"
	_ "trpc.group/trpc-go/trpc-go/http"
	"trpc.group/trpc-go/trpc-go/server"
)

// START ======================================= Server Service Definition ======================================= START

// DataServiceService defines service.
type DataServiceService interface {
	ProcessData(ctx context.Context, req *ProcessDataRequest) (*Mydata, error)
}

func DataServiceService_ProcessData_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &ProcessDataRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(DataServiceService).ProcessData(ctx, reqbody.(*ProcessDataRequest))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

// DataServiceServer_ServiceDesc descriptor for myserver.RegisterService.
var DataServiceServer_ServiceDesc = server.ServiceDesc{
	ServiceName: "trpc.test.helloworld.DataService",
	HandlerType: ((*DataServiceService)(nil)),
	Methods: []server.Method{
		{
			Name: "/trpc.test.helloworld.DataService/ProcessData",
			Func: DataServiceService_ProcessData_Handler,
		},
	},
}

// RegisterDataServiceService registers service.
func RegisterDataServiceService(s server.Service, svr DataServiceService) {
	if err := s.Register(&DataServiceServer_ServiceDesc, svr); err != nil {
		panic(fmt.Sprintf("DataService register error:%v", err))
	}
}

// START --------------------------------- Default Unimplemented Server Service --------------------------------- START

type UnimplementedDataService struct{}

func (s *UnimplementedDataService) ProcessData(ctx context.Context, req *ProcessDataRequest) (*Mydata, error) {
	return nil, errors.New("rpc ProcessData of service DataService is not implemented")
}

// END --------------------------------- Default Unimplemented Server Service --------------------------------- END

// END ======================================= Server Service Definition ======================================= END

// START ======================================= Client Service Definition ======================================= START

// DataServiceClientProxy defines service TRpcclient proxy
type DataServiceClientProxy interface {
	ProcessData(ctx context.Context, req *ProcessDataRequest, opts ...client.Option) (rsp *Mydata, err error)
}

type DataServiceClientProxyImpl struct {
	client client.Client
	opts   []client.Option
}

var NewDataServiceClientProxy = func(opts ...client.Option) DataServiceClientProxy {
	return &DataServiceClientProxyImpl{client: client.DefaultClient, opts: opts}
}

func (c *DataServiceClientProxyImpl) ProcessData(ctx context.Context, req *ProcessDataRequest, opts ...client.Option) (*Mydata, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/trpc.test.helloworld.DataService/ProcessData")
	msg.WithCalleeServiceName(DataServiceServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("test")
	msg.WithCalleeServer("helloworld")
	msg.WithCalleeService("DataService")
	msg.WithCalleeMethod("ProcessData")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &Mydata{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

// END ======================================= Client Service Definition ======================================= END
